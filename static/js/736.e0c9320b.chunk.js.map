{"version":3,"file":"static/js/736.e0c9320b.chunk.js","mappings":"kSAEaA,EAAWC,EAAAA,EAAAA,GAAH,4EAMRC,EAAWD,EAAAA,EAAAA,GAAH,mHAORE,EAAgBF,EAAAA,EAAAA,IAAH,0CAIbG,EAAgBH,EAAAA,EAAAA,EAAH,wF,SCwD1B,EAhEa,WACX,IAAQI,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAAwBE,EAAAA,EAAAA,UAAS,IAAjC,eAAOC,EAAP,KAAaC,EAAb,KACA,GAAkCF,EAAAA,EAAAA,WAAS,GAA3C,eAAOG,EAAP,KAAkBC,EAAlB,KACA,GAA0BJ,EAAAA,EAAAA,UAAS,MAAnC,eAAOK,EAAP,KAAcC,EAAd,KACMC,GAAYC,EAAAA,EAAAA,UA6BlB,OA3BAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAW,mCAAG,2FACdH,EAAUI,SACZJ,EAAUI,QAAQC,QAGpBL,EAAUI,QAAU,IAAIE,gBALN,SAQhBT,GAAa,GACbE,EAAS,MATO,UAWOQ,EAAAA,EAAAA,IAAQhB,EAASS,EAAUI,QAAQI,QAX1C,OAWVC,EAXU,OAahBd,EAAQc,GACRV,EAAS,MAdO,kDAgBG,iBAAf,KAAMW,MACRX,EAAS,KAAMY,SAjBD,yBAoBhBd,GAAa,GApBG,6EAAH,qDAuBjBM,GACD,GAAE,CAACZ,KAGF,gCACGK,IAAa,SAACgB,EAAA,EAAD,IACbd,IAAS,uBAAIA,KAEd,SAACZ,EAAD,UACGQ,EAAKmB,KAAI,YAA2D,IAAxDC,EAAuD,EAAvDA,GAAIC,EAAmD,EAAnDA,aAAcC,EAAqC,EAArCA,cAAeC,EAAsB,EAAtBA,KAAMC,EAAgB,EAAhBA,UAClD,OACE,UAAC9B,EAAD,YACE,gBACE+B,MAAM,QACNC,IACEL,EAAY,yCAC0BA,GAD1B,mCAIdM,IAAKL,KAEP,UAAC3B,EAAD,YACE,SAACC,EAAD,UAAgB2B,KAChB,yBAAG,cAAYC,UAZJJ,EAgBlB,QAIR,C,mMCvEKQ,EAAU,mCAEhBC,EAAAA,EAAAA,SAAAA,QAAyB,gCAElB,IAAMC,EAAW,mCAAG,WAAMhB,GAAN,uFACFe,EAAAA,EAAAA,IAAU,qBAAsB,CACrDf,OAAAA,EACAiB,OAAQ,CACNC,QAASJ,EACTK,SAAU,WALW,cACnBC,EADmB,yBASlBA,EAASC,KAAKC,SATI,2CAAH,sDAYXC,EAAgB,mCAAG,WAAOC,EAAOxB,GAAd,uFACPe,EAAAA,EAAAA,IAAU,eAAgB,CAC/Cf,OAAAA,EACAiB,OAAQ,CACNC,QAASJ,EACTK,SAAU,QACVK,MAAAA,EACAC,eAAe,EACfC,KAAM,KARoB,cACxBN,EADwB,yBAYvBA,EAASC,KAAKC,SAZS,2CAAH,wDAehBK,EAAe,mCAAG,WAAO5C,EAASiB,GAAhB,uFACNe,EAAAA,EAAAA,IAAA,gBAAmBhC,GAAW,CACnDiB,OAAAA,EACAiB,OAAQ,CACNC,QAASJ,EACTK,SAAU,WALe,cACvBC,EADuB,yBAStBA,EAASC,MATa,2CAAH,wDAYftB,EAAO,mCAAG,WAAOhB,EAASiB,GAAhB,uFACEe,EAAAA,EAAAA,IAAA,gBAAmBhC,EAAnB,YAAsC,CAC3DiB,OAAAA,EACAiB,OAAQ,CACNC,QAASJ,EACTK,SAAU,WALO,cACfC,EADe,yBASdA,EAASC,KAAKnC,MATA,2CAAH,wDAYP0C,EAAU,mCAAG,WAAO7C,EAASiB,GAAhB,uFACDe,EAAAA,EAAAA,IAAA,gBAAmBhC,EAAnB,YAAsC,CAC3DiB,OAAAA,EACAiB,OAAQ,CACNC,QAASJ,EACTK,SAAU,QACVO,KAAM,KANc,cAClBN,EADkB,yBAUjBA,EAASC,KAAKC,SAVG,2CAAH,uD","sources":["components/Cast/Cast.styled.jsx","components/Cast/Cast.jsx","services/movieAPI.js"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const CastList = styled.ul`\n  display: flex;\n  flex-wrap: wrap;\n  gap: 20px;\n`;\n\nexport const CastItem = styled.li`\n  width: 200px;\n  background-color: #fde2f3;\n  border-radius: 7px;\n  overflow: hidden;\n`;\n\nexport const CharacterInfo = styled.div`\n  padding: 10px;\n`;\n\nexport const CharacterName = styled.p`\n  margin-bottom: 3px;\n  font-size: 18px;\n  font-weight: 500;\n`;\n","import Loader from 'components/Loader/Loader';\nimport { useEffect, useRef, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { getCast } from 'services/movieAPI';\nimport {\n  CastList,\n  CastItem,\n  CharacterInfo,\n  CharacterName,\n} from './Cast.styled';\n\nconst Cast = () => {\n  const { movieId } = useParams();\n  const [cast, setCast] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const abortCtrl = useRef();\n\n  useEffect(() => {\n    const getCastInfo = async () => {\n      if (abortCtrl.current) {\n        abortCtrl.current.abort();\n      }\n\n      abortCtrl.current = new AbortController();\n\n      try {\n        setIsLoading(true);\n        setError(null);\n\n        const castInfo = await getCast(movieId, abortCtrl.current.signal);\n\n        setCast(castInfo);\n        setError(null);\n      } catch (error) {\n        if (error.code !== 'ERR_CANCELED') {\n          setError(error.message);\n        }\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    getCastInfo();\n  }, [movieId]);\n\n  return (\n    <>\n      {isLoading && <Loader />}\n      {error && <p>{error}</p>}\n\n      <CastList>\n        {cast.map(({ id, profile_path, original_name, name, character }) => {\n          return (\n            <CastItem key={id}>\n              <img\n                width=\"200px\"\n                src={\n                  profile_path\n                    ? `https://image.tmdb.org/t/p/w500${profile_path}`\n                    : `https://placehold.jp/200x300.png`\n                }\n                alt={original_name}\n              />\n              <CharacterInfo>\n                <CharacterName>{name}</CharacterName>\n                <p>Character: {character}</p>\n              </CharacterInfo>\n            </CastItem>\n          );\n        })}\n      </CastList>\n    </>\n  );\n};\n\nexport default Cast;\n","import axios from 'axios';\n\nconst API_KEY = '4f3aaab7a430fc83aac7a26892b43341';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\n\nexport const getTrending = async signal => {\n  const response = await axios.get('trending/movie/day', {\n    signal,\n    params: {\n      api_key: API_KEY,\n      language: 'en-US',\n    },\n  });\n\n  return response.data.results;\n};\n\nexport const getMoviesByQuery = async (query, signal) => {\n  const response = await axios.get('search/movie', {\n    signal,\n    params: {\n      api_key: API_KEY,\n      language: 'en-US',\n      query,\n      include_adult: false,\n      page: 1,\n    },\n  });\n\n  return response.data.results;\n};\n\nexport const getMovieDetails = async (movieId, signal) => {\n  const response = await axios.get(`movie/${movieId}`, {\n    signal,\n    params: {\n      api_key: API_KEY,\n      language: 'en-US',\n    },\n  });\n\n  return response.data;\n};\n\nexport const getCast = async (movieId, signal) => {\n  const response = await axios.get(`movie/${movieId}/credits`, {\n    signal,\n    params: {\n      api_key: API_KEY,\n      language: 'en-US',\n    },\n  });\n\n  return response.data.cast;\n};\n\nexport const getReviews = async (movieId, signal) => {\n  const response = await axios.get(`movie/${movieId}/reviews`, {\n    signal,\n    params: {\n      api_key: API_KEY,\n      language: 'en-US',\n      page: 1,\n    },\n  });\n\n  return response.data.results;\n};\n"],"names":["CastList","styled","CastItem","CharacterInfo","CharacterName","movieId","useParams","useState","cast","setCast","isLoading","setIsLoading","error","setError","abortCtrl","useRef","useEffect","getCastInfo","current","abort","AbortController","getCast","signal","castInfo","code","message","Loader","map","id","profile_path","original_name","name","character","width","src","alt","API_KEY","axios","getTrending","params","api_key","language","response","data","results","getMoviesByQuery","query","include_adult","page","getMovieDetails","getReviews"],"sourceRoot":""}